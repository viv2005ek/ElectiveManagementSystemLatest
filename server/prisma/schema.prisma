generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Credential {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  role         UserRole
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  student      Student?
  professor    Professor?
  admin        Admin?
}

model Admin {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  middleName         String?
  lastName           String?
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Faculty {
  id      String   @id @default(uuid())
  name    String   @unique
  schools School[]
}

model School {
  id          String       @id @default(uuid())
  name        String       @unique
  facultyId   String
  faculty     Faculty      @relation(fields: [facultyId], references: [id])
  departments Department[]
}

model Department {
  id            String         @id @default(uuid())
  name          String         @unique
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  professors    Professor[]
  courses       Course[]
  courseBuckets CourseBucket[]
  Program       Program[]
}

model Program {
  id           String      @id @default(uuid())
  name         String      @unique
  departmentId String
  department   Department  @relation(fields: [departmentId], references: [id])
  programType  ProgramType
  students     Student[]
  subjects     Subject[]   @relation("ProgramToSubject")
}

model Student {
  id                 String      @id @default(uuid())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  registrationNumber String      @unique
  programId          String
  program            Program     @relation(fields: [programId], references: [id])
  email              String      @unique
  firstName          String
  middleName         String?
  lastName           String?
  gender             Gender
  semester           Int
  batchId            String
  batch              Batch       @relation(fields: [batchId], references: [id])
  contactNumber      String      @unique @db.VarChar(15)
  credentialId       String      @unique
  credential         Credential  @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean     @default(false)
  allotments         Allotment[]

  @@index([registrationNumber])
}

model Professor {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  professorRankId    String
  professorRank      ProfessorRank @relation(fields: [professorRankId], references: [id])
  registrationNumber String        @unique
  departmentId       String
  department         Department    @relation(fields: [departmentId], references: [id])
  email              String        @unique
  firstName          String
  middleName         String?
  lastName           String?
  credentialId       String        @unique
  credential         Credential    @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean       @default(false)
}

model Course {
  id                  String               @id @default(uuid())
  code                String
  name                String
  credits             Int
  departmentId        String
  department          Department           @relation(fields: [departmentId], references: [id])
  courseBuckets       CourseBucket[]       @relation("CourseBucketToCourse")
  allotments          Allotment[]
  courseBucketCourses CourseBucketCourse[]
  subjects            Subject[]            @relation("SubjectCourses")

  @@unique([code, departmentId])
}

model CourseBucket {
  id                  String               @id @default(uuid())
  name                String
  departmentId        String
  department          Department           @relation(fields: [departmentId], references: [id])
  courses             Course[]             @relation("CourseBucketToCourse")
  allotments          Allotment[]
  courseBucketCourses CourseBucketCourse[]
  subjects            Subject[]            @relation("SubjectCourseBuckets")
}

model CourseBucketCourse {
  id             String       @id @default(uuid())
  courseBucketId String
  courseBucket   CourseBucket @relation(fields: [courseBucketId], references: [id])
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id])
  orderIndex     Int

  @@unique([courseBucketId, courseId])
  @@unique([courseBucketId, orderIndex])
}

model SubjectType {
  id                  String        @id @default(uuid())
  name                String        @unique
  description         String?
  allotmentType       AllotmentType
  allowAnyDepartment  Boolean
  allowSameFaculty    Boolean
  allowSameSchool     Boolean
  allowSameDepartment Boolean
  subjects            Subject[]
}

model Subject {
  id            String         @id @default(uuid())
  name          String
  semester      Int?
  batchId       String
  batch         Batch          @relation(fields: [batchId], references: [id])
  subjectTypeId String
  subjectType   SubjectType    @relation(fields: [subjectTypeId], references: [id])
  semesters     Semester[]     @relation("SubjectSemesters")
  programs      Program[]      @relation("ProgramToSubject")
  courses       Course[]       @relation("SubjectCourses")
  courseBuckets CourseBucket[] @relation("SubjectCourseBuckets")
  allotments    Allotment[]
}

model Batch {
  id       String    @id @default(uuid())
  year     Int       @unique
  students Student[]
  subjects Subject[]
}

model Semester {
  id         String      @id @default(uuid())
  number     Int         @unique
  subjects   Subject[]   @relation("SubjectSemesters")
  allotments Allotment[]
}

model Allotment {
  id              String          @id @default(uuid())
  studentId       String
  student         Student         @relation(fields: [studentId], references: [id])
  subjectId       String
  subject         Subject         @relation(fields: [subjectId], references: [id])
  courseBucketId  String?
  courseBucket    CourseBucket?   @relation(fields: [courseBucketId], references: [id])
  courseId        String
  course          Course          @relation(fields: [courseId], references: [id])
  semesterId      String
  semester        Semester        @relation(fields: [semesterId], references: [id])
  allotmentStatus AllotmentStatus
}

model ProfessorRank {
  id        String      @id @default(uuid())
  name      String      @unique
  priority  Int         @unique
  Professor Professor[]
}

enum Gender {
  Male
  Female
  Other
}

enum ProgramType {
  Undergraduate
  Postgraduate
  PhD
}

enum UserRole {
  Student
  Professor
  Admin
}

enum AllotmentType {
  Standalone
  Bucket
}

enum AllotmentStatus {
  Pending
  Confirmed
}
