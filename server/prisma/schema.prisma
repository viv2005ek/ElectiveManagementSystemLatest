generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Credential {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  student      Student?
  faculty      Faculty?
  admin        Admin?
}

model Student {
  id                    String               @id @default(uuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  registrationNumber    String               @unique
  email                 String               @unique
  firstName             String
  lastName              String?
  gender                Gender
  minorSpecializationId String?
  semester              Int
  section               String
  batch                 Int
  branchId              String
  branch                Branch               @relation(fields: [branchId], references: [id])
  contactNumber         String               @db.VarChar(15)
  profilePictureId      String?
  credentialId          String               @unique
  credential            Credential           @relation(fields: [credentialId], references: [id])
  isDeleted             Boolean              @default(false)
  subjectPreferences    SubjectPreferences[]
  courseAllotment       CourseAllotment[]
}

model Faculty {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  lastName           String?
  departmentId       String
  department         Department @relation(fields: [departmentId], references: [id])
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Admin {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  lastName           String?
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Department {
  id           String         @id @default(uuid())
  name         String         @unique
  branches     Branch[]
  faculty      Faculty[]
  isDeleted    Boolean        @default(false)
  course       Course[]
  courseBucket CourseBucket[]
}

model Branch {
  id           String     @id @default(uuid())
  name         String     @unique
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  students     Student[]
  subjects     Subject[]  @relation("SubjectToBranch")
  isDeleted    Boolean    @default(false)
}

model Course {
  id                 String               @id @default(uuid())
  name               String
  code               String               @unique
  credits            Int
  isDeleted          Boolean              @default(false)
  departmentId       String
  department         Department           @relation(fields: [departmentId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  courseCategories   CourseCategory[]
  courseBuckets      CourseBucket[]
  subjectPreferences SubjectPreferences[]
  courseAllotment    CourseAllotment[]
  subject            Subject[]            @relation("SubjectToCourse")
  bucketCourseOrder  BucketCourseOrder[]
}

model CourseCategory {
  id            String        @id @default(uuid())
  name          String        @unique
  courses       Course[]
  isDeleted     Boolean       @default(false)
  allotmentType AllotmentType
  subjects      Subject[]
}

model CourseBucket {
  id                 String               @id @default(uuid())
  name               String
  departmentId       String
  department         Department           @relation(fields: [departmentId], references: [id])
  courses            Course[]
  subjectPreferences SubjectPreferences[]
  courseAllotment    CourseAllotment[]
  isDeleted          Boolean              @default(false)
  bucketCourseOrder  BucketCourseOrder[]
}

model BucketCourseOrder {
  id             String       @id @default(uuid())
  courseBucketId String
  courseBucket   CourseBucket @relation(fields: [courseBucketId], references: [id])
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id])
  allotmentOrder Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([courseBucketId, courseId, allotmentOrder])
}

model BucketSubjectSemesterMapping {
  id        String   @id @default(uuid())
  subjectId String
  batch     Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  semester  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([subjectId, semester])
}

model Subject {
  id                           String                         @id @default(uuid())
  name                         String
  semester                     Int
  batch                        Int
  isEnrollOpen                 Boolean                        @default(false)
  enrollmentDeadline           DateTime?
  branches                     Branch[]                       @relation("SubjectToBranch")
  subjectPreferences           SubjectPreferences[]
  courseAllotments             CourseAllotment[]
  courses                      Course[]                       @relation("SubjectToCourse")
  isDeleted                    Boolean                        @default(false)
  categoryId                   String
  category                     CourseCategory                 @relation(fields: [categoryId], references: [id])
  bucketSubjectSemesterMapping BucketSubjectSemesterMapping[]
}

model SubjectPreferences {
  id              String        @id @default(uuid())
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id])
  courseId        String?
  course          Course?       @relation(fields: [courseId], references: [id])
  courseBucketId  String?
  courseBucket    CourseBucket? @relation(fields: [courseBucketId], references: [id])
  subjectId       String
  subject         Subject       @relation(fields: [subjectId], references: [id])
  preferenceOrder Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)

  @@unique([subjectId, studentId, courseId, courseBucketId, preferenceOrder])
  @@index([studentId])
}

model CourseAllotment {
  id             String          @id @default(uuid())
  studentId      String
  student        Student         @relation(fields: [studentId], references: [id])
  courseId       String?
  course         Course?         @relation(fields: [courseId], references: [id])
  semester       Int
  courseBucketId String?
  courseBucket   CourseBucket?   @relation(fields: [courseBucketId], references: [id])
  subjectId      String
  subject        Subject         @relation(fields: [subjectId], references: [id])
  type           AllotmentType
  status         AllotmentStatus @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isDeleted      Boolean         @default(false)

  @@unique([studentId, courseId, courseBucketId, semester])
  @@index([studentId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum AllotmentType {
  STANDALONE
  BUCKET
}

enum AllotmentStatus {
  PENDING
  CONFIRMED
  REJECTED
}
