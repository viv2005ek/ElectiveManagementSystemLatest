generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StudentCredential {
  id                 String @id @default(uuid())
  registrationNumber String @unique
  email              String @unique
  passwordHash       String
}

model FacultyCredential {
  id                 String @id @default(uuid())
  registrationNumber String @unique
  email              String @unique
  passwordHash       String
}

model AdminCredential {
  id                 String @id @default(uuid())
  registrationNumber String @unique
  email              String @unique
  passwordHash       String
}

model Student {
  id                            String                         @id @default(uuid())
  registrationNumber            String                         @unique
  email                         String                         @unique
  firstName                     String
  lastName                      String?
  gender                        String
  minorSpecializationId         String?
  minorSpecialization           MinorSpecialization?           @relation(fields: [minorSpecializationId], references: [id])
  semester                      Int
  section                       String
  batch                         Int
  departmentId                  String
  department                    Department                     @relation(fields: [departmentId], references: [id])
  branchId                      String
  branch                        Branch                         @relation(fields: [branchId], references: [id])
  contactNumber                 String
  minorSpecializationPreference MinorSpecializationPreference?
  programmeElectivePreferences  ProgrammeElectivePreference[]
  profilePictureId              String?
}

model Faculty {
  id                       String                              @id @default(uuid())
  registrationNumber       String                              @unique
  email                    String                              @unique
  firstName                String
  lastName                 String?
  facultyElectiveAllotment FacultyProgrammeElectiveAllotment[]
}

model Admin {
  id                 String  @id @default(uuid())
  registrationNumber String  @unique
  email              String  @unique
  firstName          String
  lastName           String?
}

model Department {
  id                   String                @id @default(uuid())
  name                 String                @unique
  branches             Branch[]              @relation("DepartmentBranches")
  minorSpecializations MinorSpecialization[]
  Student              Student[]
}

model Branch {
  id           String     @id @default(uuid())
  name         String     @unique
  departmentId String
  department   Department @relation("DepartmentBranches", fields: [departmentId], references: [id])

  Student Student[]
}

model ProgrammeElective {
  id                                String                        @id @default(uuid())
  courseCode                        String                        @unique
  name                              String                        @unique
  semester                          Int
  isStandalone                      Boolean                       @default(false)
  minorSpecializationId             String?
  minorSpecialization               MinorSpecialization?          @relation(fields: [minorSpecializationId], references: [id])
  programmeElectiveFirstPreference  ProgrammeElectivePreference[] @relation("FirstPreference")
  programmeElectiveSecondPreference ProgrammeElectivePreference[] @relation("SecondPreference")
  programmeElectiveThirdPreference  ProgrammeElectivePreference[] @relation("ThirdPreference")
}

model FacultyProgrammeElectiveAllotment {
  id                 String  @id @default(uuid())
  facultyId          String
  faculty            Faculty @relation(fields: [facultyId], references: [id])
  electiveId         String
  electiveName       String
  electiveCourseCode String
  allotmentSemester  Int
}

model MinorSpecializationPreference {
  id                 String              @id @default(uuid())
  studentId          String              @unique
  student            Student             @relation(fields: [studentId], references: [id])
  firstPreferenceId  String
  firstPreference    MinorSpecialization @relation("FirstPreference", fields: [firstPreferenceId], references: [id])
  secondPreferenceId String
  secondPreference   MinorSpecialization @relation("SecondPreference", fields: [secondPreferenceId], references: [id])
  thirdPreferenceId  String
  thirdPreference    MinorSpecialization @relation("ThirdPreference", fields: [thirdPreferenceId], references: [id])
  createdAt          DateTime            @default(now())
}

model ProgrammeElectivePreference {
  id                 String             @id @default(uuid())
  studentId          String
  student            Student            @relation(fields: [studentId], references: [id])
  semester           Int
  firstPreferenceId  String?
  firstPreference    ProgrammeElective? @relation("FirstPreference", fields: [firstPreferenceId], references: [id])
  secondPreferenceId String?
  secondPreference   ProgrammeElective? @relation("SecondPreference", fields: [secondPreferenceId], references: [id])
  thirdPreferenceId  String?
  thirdPreference    ProgrammeElective? @relation("ThirdPreference", fields: [thirdPreferenceId], references: [id])
  createdAt          DateTime           @default(now())
}

model MinorSpecialization {
  id                                  String                          @id @default(uuid())
  name                                String                          @unique
  departmentId                        String
  department                          Department                      @relation(fields: [departmentId], references: [id])
  programmeElectives                  ProgrammeElective[]
  minorSpecializationFirstPreference  MinorSpecializationPreference[] @relation("FirstPreference")
  minorSpecializationSecondPreference MinorSpecializationPreference[] @relation("SecondPreference")
  minorSpecializationThirdPreference  MinorSpecializationPreference[] @relation("ThirdPreference")
  students                            Student[]
}

model MinorSpecializationAllotmentWindow {
  id         String  @id @default(uuid())
  semester   Int
  batch      Int
  isOpen     Boolean
  totalSeats Int?
}

model ProgrammeElectiveAllotmentWindow {
  id                 String @id @default(uuid())
  semester           Int
  batch              Int
  electiveName       String
  electiveCourseCode String
  allotmentSemester  Int
  totalSeats         Int?
}
