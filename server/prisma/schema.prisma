generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credential {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  student      Student? @relation(map: "Credential_Student_fkey")
  faculty      Faculty? @relation(map: "Credential_Faculty_fkey")
  admin        Admin?   @relation(map: "Credential_Admin_fkey")
}

model Student {
  id                    String               @id @default(uuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  registrationNumber    String               @unique
  email                 String               @unique
  firstName             String
  lastName              String?
  gender                Gender
  minorSpecializationId String?
  semester              Int
  section               String
  batch                 Int
  branchId              String
  branch                Branch               @relation(fields: [branchId], references: [id])
  contactNumber         String               @db.VarChar(15)
  profilePictureId      String?
  credentialId          String               @unique
  credential            Credential           @relation(fields: [credentialId], references: [id])
  isDeleted             Boolean              @default(false)
  SubjectPreferences    SubjectPreferences[]
  CourseAllotment       CourseAllotment[]
}

model Faculty {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  lastName           String?
  departmentId       String
  department         Department @relation(fields: [departmentId], references: [id])
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Admin {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  lastName           String?
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Department {
  id           String         @id @default(uuid())
  name         String         @unique
  branches     Branch[]
  faculty      Faculty[]
  isDeleted    Boolean        @default(false)
  Course       Course[]
  CourseBucket CourseBucket[]
}

model Branch {
  id                      String                   @id @default(uuid())
  name                    String                   @unique
  departmentId            String
  department              Department               @relation(fields: [departmentId], references: [id])
  students                Student[]
  subjectAllotmentWindows SubjectAllotmentWindow[] @relation("SubjectAllotmentWindowToBranch")
  isDeleted               Boolean                  @default(false)
}

model Course {
  id                 String               @id @default(uuid())
  name               String
  code               String               @unique
  credits            Int
  isDeleted          Boolean              @default(false)
  departmentId       String
  department         Department           @relation(fields: [departmentId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  courseCategories   CourseCategory[]
  courseBuckets      CourseBucket[]
  SubjectPreferences SubjectPreferences[]
  CourseAllotment    CourseAllotment[]
}

model CourseCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  isDeleted Boolean  @default(false)
}

model CourseBucket {
  id                 String               @id @default(uuid())
  name               String
  departmentId       String
  department         Department           @relation(fields: [departmentId], references: [id])
  courses            Course[]
  SubjectPreferences SubjectPreferences[]
  CourseAllotment    CourseAllotment[]
  isDeleted          Boolean              @default(false)
}

model SubjectAllotmentWindow {
  id                 String               @id @default(uuid())
  name               String
  semester           Int
  batch              Int
  isActive           Boolean              @default(false)
  branches           Branch[]             @relation("SubjectAllotmentWindowToBranch")
  subjectPreferences SubjectPreferences[]
  courseAllotments   CourseAllotment[]
  isDeleted          Boolean              @default(false)
}

model SubjectPreferences {
  id                String                 @id @default(uuid())
  studentId         String
  student           Student                @relation(fields: [studentId], references: [id])
  courseId          String?
  course            Course?                @relation(fields: [courseId], references: [id])
  courseBucketId    String?
  courseBucket      CourseBucket?          @relation(fields: [courseBucketId], references: [id])
  allotmentWindowId String
  allotmentWindow   SubjectAllotmentWindow @relation(fields: [allotmentWindowId], references: [id])
  preferenceOrder   Int
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  isDeleted         Boolean                @default(false)

  @@unique([studentId, courseId, courseBucketId, allotmentWindowId])
}

model CourseAllotment {
  id                String                 @id @default(uuid())
  studentId         String
  student           Student                @relation(fields: [studentId], references: [id])
  courseId          String?
  course            Course?                @relation(fields: [courseId], references: [id])
  semester          Int
  courseBucketId    String?
  courseBucket      CourseBucket?          @relation(fields: [courseBucketId], references: [id])
  allotmentWindowId String
  allotmentWindow   SubjectAllotmentWindow @relation(fields: [allotmentWindowId], references: [id])
  type              AllotmentType
  status            AllotmentStatus        @default(PENDING)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  isDeleted         Boolean                @default(false)

  @@unique([studentId, courseId, allotmentWindowId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum AllotmentType {
  STANDALONE
  BUCKET
}

enum AllotmentStatus {
  PENDING
  CONFIRMED
  REJECTED
}
