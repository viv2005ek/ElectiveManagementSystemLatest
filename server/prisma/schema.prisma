generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credential {
  id                 String   @id @default(uuid())
  email              String   @unique
  passwordHash       String
  registrationNumber String   @unique
  role               UserRole
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  student            Student? @relation(map: "Credential_Student_fkey")
  faculty            Faculty? @relation(map: "Credential_Faculty_fkey")
  admin              Admin?   @relation(map: "Credential_Admin_fkey")
}

model Student {
  id                         String                       @id @default(uuid())
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  registrationNumber         String                       @unique
  email                      String                       @unique
  firstName                  String
  lastName                   String?
  gender                     Gender
  minorSpecializationId      String?
  minorSpecialization        MinorSpecialization?         @relation(fields: [minorSpecializationId], references: [id])
  semester                   Int
  section                    String
  batch                      Int
  departmentId               String
  department                 Department                   @relation(fields: [departmentId], references: [id])
  branchId                   String
  branch                     Branch                       @relation(fields: [branchId], references: [id])
  contactNumber              String                       @db.VarChar(15)
  profilePictureId           String?
  programmeElectiveAllotment ProgrammeElectiveAllotment[]
  credentialId               String                       @unique
  credential                 Credential                   @relation(fields: [credentialId], references: [id])
  isDeleted                  Boolean                      @default(false)
  MinorSpecializationChoice  MinorSpecializationChoice[]
  ProgrammeElectiveChoice    ProgrammeElectiveChoice[]
}

model Faculty {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  lastName           String?
  departmentId       String
  department         Department @relation(fields: [departmentId], references: [id])
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Admin {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  registrationNumber String     @unique
  email              String     @unique
  firstName          String
  lastName           String?
  credentialId       String     @unique
  credential         Credential @relation(fields: [credentialId], references: [id])
  isDeleted          Boolean    @default(false)
}

model Department {
  id                   String                @id @default(uuid())
  name                 String                @unique
  branches             Branch[]
  minorSpecializations MinorSpecialization[]
  student              Student[]
  faculty              Faculty[]
  isDeleted            Boolean               @default(false)
}

model Branch {
  id           String     @id @default(uuid())
  name         String     @unique
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  Student      Student[]
}

model ProgrammeElective {
  id                         String                       @id @default(uuid())
  courseCode                 String                       @unique
  name                       String                       @unique
  semester                   Int
  isIndependentCourse        Boolean                      @default(false)
  minorSpecializationId      String?
  minorSpecialization        MinorSpecialization?         @relation(fields: [minorSpecializationId], references: [id])
  ProgrammeElectiveAllotment ProgrammeElectiveAllotment[]
  isDeleted                  Boolean                      @default(false)
  ProgrammeElectiveChoice    ProgrammeElectiveChoice[]
}

model MinorSpecializationChoice {
  id                    String              @id @default(uuid())
  minorSpecializationId String
  minorSpecialization   MinorSpecialization @relation(fields: [minorSpecializationId], references: [id])
  studentId             String
  student               Student             @relation(fields: [studentId], references: [id])
  preferenceRank        Int
  createdAt             DateTime            @default(now())
}

model MinorSpecialization {
  id                        String                      @id @default(uuid())
  name                      String
  departmentId              String
  department                Department                  @relation(fields: [departmentId], references: [id])
  programmeElectives        ProgrammeElective[]
  students                  Student[]
  isDeleted                 Boolean                     @default(false)
  MinorSpecializationChoice MinorSpecializationChoice[]
}

model MinorSpecializationAllotmentWindow {
  id         String   @id @default(uuid())
  semester   Int
  batch      Int
  isOpen     Boolean  @default(false)
  totalSeats Int?
  deadline   DateTime
}

model ProgrammeElectiveCourse {
  id                         String                       @id @default(uuid())
  name                       String
  semester                   Int
  batch                      Int
  enrollmentIsActive         Boolean                      @default(false)
  isDeleted                  Boolean                      @default(false)
  deadline                   DateTime
  ProgrammeElectiveChoice    ProgrammeElectiveChoice[]
  ProgrammeElectiveAllotment ProgrammeElectiveAllotment[]
}

model ProgrammeElectiveChoice {
  id                        String                  @id @default(uuid())
  programmeElectiveCourseId String
  programmeElectiveCourse   ProgrammeElectiveCourse @relation(fields: [programmeElectiveCourseId], references: [id])
  studentId                 String
  student                   Student                 @relation(fields: [studentId], references: [id])
  semester                  Int
  preferenceRank            Int
  programmeElectiveId       String
  programmeElective         ProgrammeElective       @relation(fields: [programmeElectiveId], references: [id])
  createdAt                 DateTime                @default(now())
}

model ProgrammeElectiveAllotment {
  id                        String                  @id @default(uuid())
  studentId                 String
  student                   Student                 @relation(fields: [studentId], references: [id])
  programmeElectiveCourseId String
  programmeElectiveCourse   ProgrammeElectiveCourse @relation(fields: [programmeElectiveCourseId], references: [id])
  programmeElectiveId       String
  programmeElective         ProgrammeElective       @relation(fields: [programmeElectiveId], references: [id])
  semester                  Int
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}
